# import libraries
import pandas as pd

# Load the data
df = pd.read_csv('Titanic-Dataset.csv') 

# Preview the data
print(df.head())
print(df.columns)
print(df.count())
print(df.shape)
print(df.size)
print(df.info())

# Summary statistics
print(df.describe())

# checking missing values
print(df.isnull().sum())

# Handling missing values using mean
  # For numerical values
numerical_columns = df.select_dtypes(include=['int64', 'float64']).columns
df[numerical_columns] = df[numerical_columns].fillna(df[numerical_columns].mean())
  # fOR categorical values
categorical_columns=df.select_dtypes(include='object').columns
df[categorical_columns] = df[categorical_columns].fillna('unkown')

# Confirm that missing values are handled
print(df.isnull().sum())
print(df.count())
print(df.dtypes)

# coverting categorical features into numerical 
  # Encoding 
from sklearn.preprocessing import LabelEncoder

# Initialize the LabelEncoder
label_encoder = LabelEncoder()

# Applying label encoding to the 'sex' and 'embarked' columns
df['Sex'] = label_encoder.fit_transform(df['Sex'])
df['Embarked'] = label_encoder.fit_transform(df['Embarked'].fillna('S')) # Fill missing values with 'S' (most common value)

# Now your 'sex' and 'embarked' columns are converted to numerical values
print(df[['Sex', 'Embarked']].head())

# Normalization
from sklearn.preprocessing import MinMaxScaler
numerical_columns = ["PassengerId","Survived","Pclass","SibSp","Parch"] 

# Initialize the MinMaxScaler
scaler = MinMaxScaler()

# Normalize the numerical features
df[numerical_columns] = scaler.fit_transform(df[numerical_columns])

# Now the numerical columns are normalized (range 0-1)
print(df[numerical_columns].head())

# Visualize outliers using boxplots and remove them
import seaborn as sns
import matplotlib.pyplot as plt
numerical1_columns=["Age","Fare"]

# Create boxplots to visualize outliers
plt.figure(figsize=(8, 3))
for i, column in enumerate(numerical1_columns):
    plt.subplot(1, len(numerical1_columns), i + 1)
    sns.boxplot(data=df, x=column)
    plt.title(f'Boxplot of {column}')
plt.tight_layout()
plt.show()

# Function to remove outliers based on IQR
def remove_outliers(df, column):
    Q1 = df[column].quantile(0.25)
    Q3 = df[column].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    df_cleaned = df[(df[column] >= lower_bound) & (df[column] <= upper_bound)]
    return df_cleaned

# Remove outliers from each numerical column
for column in numerical_columns:
    df = remove_outliers(df, column)

  # Now df will have the outliers removed
print(df[numerical_columns].head())
